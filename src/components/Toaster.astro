---

---

<script lang="js">
function toastsHandler() {
  return {
    toasts: [],
    visible: [],
    add(toast) {
      toast.id = Date.now();
      this.toasts.push(toast);
      this.fire(toast.id);
    },
    fire(id) {
      this.visible.push(this.toasts.find((t) => t.id == id));
      const timeShown = 6500 * this.visible.length;
      setTimeout(() => {
        this.remove(id);
      }, timeShown);
    },
    remove(id) {
      const t = this.visible.find((t) => t.id == id);
      const index = this.visible.indexOf(t);
      this.visible.splice(index, 1);
    },
  };
}
</script>
<div
  x-data="toastsHandler()"
  class="fixed inset-0 flex flex-col-reverse items-end justify-start h-screen w-screen"
  @notify.window="add($event.detail)"
  style="pointer-events:none"
>
  <template x-for="toast of toasts" :key="toast.id">
    <div
      x-show="visible.includes(toast)"
      x-transition:enter="transition ease-in duration-200"
      x-transition:enter-start="transform opacity-0 translate-y-2"
      x-transition:enter-end="transform opacity-100"
      x-transition:leave="transition ease-out duration-500"
      x-transition:leave-start="transform translate-x-0 opacity-100"
      x-transition:leave-end="transform translate-x-full opacity-0"
      @click="remove(toast.id)"
      class="rounded mb-4 mr-4 px-4 w-64 h-12 flex items-center justify-between text-white shadow-lg font-bold text-xs cursor-pointer opacity-90"
      :class={`{
				'bg-green-600': toast.type === 'success',
				'bg-blue-600': toast.type === 'info',
				'bg-orange-600': toast.type === 'warning',
				'bg-red-600': toast.type === 'error',
			 }`}
      style="pointer-events:all"
    >
      <span x-text="toast.text"></span>
      <span class="material-symbols-outlined"> close</span>
    </div>

    <style lang="scss">
      #toaster {
        position: fixed;
        bottom: 0;
        right: 0;
        width: 100%;
      }
    </style>
    <script></script>
  </template>
</div>
