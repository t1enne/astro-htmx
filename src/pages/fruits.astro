---
import Layout from "../layouts/Layout.astro";
import FruitTable from "./partials/fruit-table.astro";

const fruits = ["Banana", "Apple", "Raisin", "Peach", "Pear"];
---

<Layout title="Welcome to Astro.">
  <div
    class="m-auto"
    x-data="initFruits()"
    @htmx:after-swap="closeModals(); $dispatch('notify', { text: 'Saved successfully!', type: 'success' })"
    @htmx:response-error="closeModals(); $dispatch('notify', { text: $event.detail.xhr.response, type: 'error' })"
  >
    <a
      href="#open_modal"
      @click="openUpsertModal()"
      role="button"
      class="flex w-fit items-center ml-auto"
      >Add<span class="ml-2 material-symbols-outlined"> add_circle</span></a
    >
    <FruitTable />

    <!-- Select -->
    <dialog id="upsert-dialog" tabindex="-1">
      <article class="w-96">
        <header>
          <span class="text-lg font-bold" x-text="selected ? 'Aggiorna frutta' : 'Nuova frutta'"></span>
          <a
            @click="closeModals()"
            href="#close"
            class="close"
            aria-label="Close"
          >
          </a>
        </header>
        <form
          hx-post="/api/fruits"
          hx-target="#fruit-table"
          hx-on::after-request="this.reset()"
        >
          <input name="id" hidden :value="selected?.id"/>
          <label for="fruit">Fruit</label>
          <select id="fruit" name="fruit" required autofocus>
            <option value="" selected>Select a fruitâ€¦</option>
            {
              fruits.map((f) => {
                return <option value={f} :selected={`selected?.fruit == '${f}'`}>{f}</option>;
              })
            }
          </select>

          <!-- Radios -->
          <fieldset>
            <legend>Size</legend>
            { ['small', 'medium', 'large', 'extralarge'].map((s,i) => <label for={s}><input type="radio" id={s} name="size" value={s} required :checked={`selected?.size == '${s}' || !selected && ${i} == 0`}/> {s}</label>) }
          </fieldset>

          <!-- Checkboxes -->
          <fieldset x-show="isUpsertOpen">
            <label for="terms">
              <input type="checkbox" id="terms" name="terms" disabled checked />
               I agree to the Terms and Conditions
            </label>
          </fieldset>

          <!-- Switches -->
          <fieldset>
            <label for="switch">
              <input
                type="checkbox"
                id="switch"
                name="switch"
                role="switch"
                disabled
              />
               Publish on my profile
            </label>
          </fieldset>
          <div class="grid grid-cols-2">
            <button @click="closeModals()" type="button" class="secondary"
              >Cancel</button
            >
            <button type="submit">Salva</button>
          </div>
        </form>
      </article>
    </dialog>
    <dialog id="delete-dialog" tabindex="-1">
      <article class="w-96 pb-2">
        <header>
          <span class="text-lg font-bold">Cancella frutta?</span>
          <a
            @click="closeModals()"
            href="#close"
            class="close"
            aria-label="Close"
          >
          </a>
        </header>
        <form hx-delete="/api/fruits" hx-on::after-request="this.reset()" hx-target="#fruit-table">
          <input name="id" hidden :value="selected?.id"/>
          <div class="flex mt-4 gap-6">
            <button @click="closeModals()" class="contrast" type="button" autofocus>Chiudi</button>
            <button class="secondary" type="submit">Conferma</button>
          </div>
        </form>
      </article>
    </dialog>

  </div>
  <script lang="js">
  function initFruits() {
    return {
      selected: {
        fruit: "",
        size: "",
      },
      formEl: document.querySelector('dialog form'),
      upsertModal: document.querySelector('dialog#upsert-dialog'),
      deleteModal: document.querySelector('dialog#delete-dialog'),
      isUpsertOpen: false,
      isDeleteOpen: false,
      closeModals() {
        this.isUpsertOpen = false;
        this.isDeleteOpen = false;
        this.upsertModal.close()
        this.deleteModal.close()
        this.selected = {};
      },
      openUpsertModal(serial) {
        this.selected = serial
        this.isUpsertOpen = true;
        this.upsertModal.showModal();
      },
      openDeleteModal(serial) {
        this.selected = serial
        this.isDeleteOpen = true;
        this.deleteModal.showModal();
      },
    }
  };
  </script>
</Layout>
