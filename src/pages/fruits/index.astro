---
import Layout from "../../layouts/Layout.astro";
import FruitTable from "./partials/fruit-table.astro";
import { FRUITS, FRUITS_SIZES } from "../../scripts/consts";
import { prisma } from "../../../prisma/seed";

const users = await prisma.user.findMany();
---

<Layout title="Welcome to Astro.">
  <div
    class="m-auto"
    x-data="initFruits()"
    @htmx:after-swap="closeModals(); $dispatch('notify', { text: 'Saved successfully!', type: 'success' })"
    @htmx:response-error="closeModals(); $dispatch('notify', { text: $event.detail.xhr.response, type: 'error' })"
  >
    <a
      href="#open_modal"
      @click="openUpsertModal()"
      role="button"
      class="flex w-fit items-center ml-auto"
      >Add<span class="ml-2 material-symbols-outlined"> add_circle</span></a
    >
    <div class="py-2"> </div>
    <FruitTable />

    <!-- Select -->
    <dialog id="upsert-dialog" tabindex="-1">
      <article class="w-96">
        <header>
          <span
            class="text-lg font-bold"
            x-text="selected ? 'Aggiorna frutta' : 'Nuova frutta'"></span>
          <a
            @click="closeModals()"
            href="#close"
            class="close"
            aria-label="Close"
          >
          </a>
        </header>
        <form
          hx-post="/api/fruits"
          hx-target="#fruit-table"
          hx-on::after-request="this.reset()"
        >
          <input name="id" hidden :value="selected?.id" />
          <label for="name" :class="'hello'">Fruit</label>
          <select id="name" name="name" required autofocus>
            <option value="" selected>Select a fruitâ€¦</option>
            {
              Object.values(FRUITS).map((f) => {
                return (
                  <option
                    value={f}
                    x-bind:selected={`selected?.name == '${f}'`}
                  >
                    {f}
                  </option>
                );
              })
            }
          </select>

          <!-- Radios -->
          <fieldset>
            <legend>Size</legend>
            {
              Object.values(FRUITS_SIZES).map((s, i) => (
                <label for={s}>
                  <input
                    type="radio"
                    id={s}
                    name="size"
                    value={s}
                    :checked={`selected?.size == '${s}' || !selected && ${i} == 0`}
                    required
                  />{" "}
                  {s}
                </label>
              ))
            }
          </fieldset>

          <!-- Checkboxes -->
          <fieldset x-show="isUpsertOpen">
            <label for="isEaten">
              <input
                type="checkbox"
                id="isEaten"
                name="isEaten"
                :checked={`selected?.isEaten == true`}
              /> Eaten
            </label>
          </fieldset>

          <fieldset x-show="isUpsertOpen">
            <script lang="js">
            function setOwnerId(event) {
              const { data } = event;
              const input = document.querySelector("input#ownerId");
              const users = JSON.parse(input.getAttribute("data-users"));
              const res = users.find((user) => user.email == data);
              input.setAttribute("value", res?.id || "null");
            }
            </script>
            <input
              id="ownerId"
              name="ownerId"
              data-users={JSON.stringify(users)}
              :value="selected?.ownerId"
              hidden
            />
            <label for="ownerId">Owner</label>
            <input list="fruitOwnersList" @input={`setOwnerId($event)`} :value="selected?.owner?.email" required/>
            <datalist id="fruitOwnersList">
              {
                users.map((user) => (
                  <option value={user.email}>{user.email}</option>
                ))
              }
            </datalist>
          </fieldset>

          <!-- Switches -->
          <div class="grid grid-cols-2">
            <button @click="closeModals()" type="button" class="secondary"
              >Cancel</button
            >
            <button type="submit">Salva</button>
          </div>
        </form>
      </article>
    </dialog>
    <dialog id="delete-dialog" tabindex="-1">
      <article class="w-96 pb-2">
        <header>
          <span class="text-lg font-bold">Cancella frutta?</span>
          <a
            @click="closeModals()"
            href="#close"
            class="close"
            aria-label="Close"
          >
          </a>
        </header>
        <form
          hx-delete="/api/fruits"
          hx-on::after-request="this.reset()"
          hx-target="#fruit-table"
        >
          <input name="id" hidden :value="selected?.id" />
          <div class="flex mt-4 gap-6">
            <button
              @click="closeModals()"
              class="contrast"
              type="button"
              autofocus>Chiudi</button
            >
            <button class="secondary" type="submit">Conferma</button>
          </div>
        </form>
      </article>
    </dialog>
  </div>
  <script lang="js">
  function initFruits() {
    return {
      selected: {
        fruit: "",
        size: "",
      },
      formEl: document.querySelector("dialog form"),
      upsertModal: document.querySelector("dialog#upsert-dialog"),
      deleteModal: document.querySelector("dialog#delete-dialog"),
      isUpsertOpen: false,
      isDeleteOpen: false,
      closeModals() {
        this.isUpsertOpen = false;
        this.isDeleteOpen = false;
        this.upsertModal.close();
        this.deleteModal.close();
        this.selected = {};
      },
      openUpsertModal(serial) {
        this.selected = serial;
        this.isUpsertOpen = true;
        this.upsertModal.showModal();
      },
      openDeleteModal(serial) {
        this.selected = serial;
        this.isDeleteOpen = true;
        this.deleteModal.showModal();
      },
    };
  }
  </script>
</Layout>
